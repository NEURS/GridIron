.gridiron () {
	.container {
		.make_container;
		&:extend(.clearfix all);
	}

	.row {
		.make_row;
		&:extend(.clearfix all);
	}

	.breakpoints;
	.visibility_mixins;
}

.clearfix () {
	&:before, &:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

.make_container (@gutter: @grid_gutter) when (@gutter > 0) {
	margin-left: auto;
	margin-right: auto;
	padding-left:  (@gutter / 2);
	padding-right: (@gutter / 2);
}

.make_row (@gutter: @grid_gutter) when (@gutter > 0) {
	margin-left:  (@gutter / -2);
	margin-right: (@gutter / -2);
}

.breakpoints (@columns: @grid_columns, @row_name: ~"", @container_name: ~".container") {
	@count: (@num_breakpoints * 2);

	.base () {
		float: left;
		min-height: 1px;
		padding-left: (@grid_gutter / 2);
		padding-right: (@grid_gutter / 2);
		position: relative;
	}

	.bp_loop () {
		@name:	extract(@breakpoints, 1);
		@name2:	~"@{name}";
		@width:	extract(@breakpoints, 2);

		.column_multiple (@row_name, @name, @columns, initial_breakpoints);

		.column_multiple_callback (initial_breakpoints) {
			.base;
		}

		.column_single (@row_name, @name, @columns, initial_breakpoints);

		.column_single_callback (initial_breakpoints, @index, @cols) when (@index < @cols) {
			width: percentage(@index / @cols);
		}

		.column_single_callback (initial_breakpoints, @index, @cols) when (@index = @cols) {
			float: none;
			width: 100%;
		}

		.bp_loop (3);
	}

	.bp_loop (@index) when (@index =< @count) {
		@name:	extract(@breakpoints, @index);
		@width:	extract(@breakpoints, (@index + 1));

		.column_multiple (@row_name, @name, @columns, initial_breakpoints);

		.column_multiple_callback (initial_breakpoints) {
			.base;
		}

		@media (min-width: @width) {
			@{container_name} {
				width: @width - @grid_gutter;
			}

			.column_single (@row_name, @name, @columns, initial_breakpoints);

			.column_single_callback (initial_breakpoints, @index, @cols) when (@index < @cols) {
				width: percentage(@index / @cols);
			}

			.column_single_callback (initial_breakpoints, @index, @cols) when (@index = @cols) {
				float: none;
				width: 100%;
			}
		}

		.bp_loop (@index + 2);
	}

	.bp_loop;
}

.column_multiple (@row_name, @name, @count, @callback) {
	.cm_loop (@index: 1, @columns: "") when (@index =< @count) {
		@tmp: "@{columns},\n@{row_name} .col-@{name}-@{index}";

		.cm_loop (@index + 1, @tmp);
	}

	.cm_loop (@index, @columns) when (@index > @count) {
		@selectors: ~`@{columns}.substr(2)`;

		@{selectors} {
			.column_multiple_callback (@callback);
		}
	}

	.cm_loop;
}

.column_single (@row_name, @name, @count, @callback) {
  	@name2: ~"@{name}";

	.cs_loop (@index: 1) when (@index =< @count) {
		@{row_name} .col-@{name2}-@{index} { .column_single_callback(@callback, @index, @count); }

		.cs_loop(@index + 1);
	}

	.cs_loop;
}

// .rgba(color, black, 0.5);
.rgba (@property, @color, @alpha) {
	@{property}: @color;
	@{property}: rgba(red(@color), green(@color), blue(@color), 1);
}

.img-retina (@file-1x; @file-2x; @width-1x; @height-1x) {
	background-image: url("@{file-1x}");

	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (   min--moz-device-pixel-ratio: 2),
	only screen and (     -o-min-device-pixel-ratio: 2/1),
	only screen and (        min-device-pixel-ratio: 2),
	only screen and (                min-resolution: 192dpi),
	only screen and (                min-resolution: 2dppx) {
		background-image: url("@{file-2x}");
		background-size: @width-1x @height-1x;
	}
}

.img-responsive (@display: block) {
	display: @display;
	max-width: 100%;
	height: auto;
}
