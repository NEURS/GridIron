.visibility_mixins() {
	@count: (@num_breakpoints * 2);

	.visibility_loop(1);

	.visibility(@name, @min, @max) {

		@name2: ~"@{name}";

		.responsive-visibility() {
		  	display: block !important;
		}

		.responsive-invisibility() {
		  	display: none !important;
		}

		.visible-@{name2} {
			display: block !important;
		}

		.visible-@{name2} {
		  	@media (min-width: @min) and (max-width: @max) {
				.responsive-visibility();
		  	}
		}	

		.visible-@{name2}-block {
		  	@media (min-width: @min) and (max-width: @max) {
				display: block !important;
		  	}
		}

		.visible-@{name2}-inline {
		  	@media (min-width: @min) and (max-width: @max) {
				display: inline !important;
		  	}
		}

		.visible-@{name2}-inline-block {
		  	@media (min-width: @min) and (max-width: @max) {
				display: inline-block !important;
		  	}
		}

		.hidden-@{name2} {
			@media (min-width: @min) and (max-width: @max) {
		  		.responsive-invisibility();
			}
		}
	}

	.visibility_loop(@index: 3) when (@index > 1) and (@index < (@count - 2)) {
		@name: 	extract(@breakpoints, @index);
		@min: 	extract(@breakpoints, @index + 1);
		@max: 	extract(@breakpoints, (@index + 3));
		.visibility(@name, @min, @max);
		.visibility_loop(@index + 2);
	}

	.visibility_loop(@index: 1) when (@index = 1) and (@index < @count) {
		.base_loop();
		@name: 	extract(@breakpoints, @index);
		@min: 	0px;
		@max: 	extract(@breakpoints, (@index + 1));
		.visibility(@name, @min, @max);
		.visibility_loop(@index + 2);
	}

	.base_loop(@i: 1) when (@i < @count){
		@name: extract(@breakpoints, @i);
		@name2: ~"@{name}";

		.visible-@{name2}, 
		.visible-@{name2}-inline,
		.visible-@{name2}-block,
		.visible-@{name2}-inline-block {
			display: none !important;
		}
		.base_loop (@i + 2);
	}
}